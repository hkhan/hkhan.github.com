<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Unit Testing | Continous Improvement]]></title>
  <link href="http://hkhan.github.com/blog/categories/unit-testing/atom.xml" rel="self"/>
  <link href="http://hkhan.github.com/"/>
  <updated>2015-06-06T19:59:44+01:00</updated>
  <id>http://hkhan.github.com/</id>
  <author>
    <name><![CDATA[Haroon Khan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Builder With Lombok]]></title>
    <link href="http://hkhan.github.com/blog/2012/09/25/builder-with-lombok/"/>
    <updated>2012-09-25T14:41:35+01:00</updated>
    <id>http://hkhan.github.com/blog/2012/09/25/builder-with-lombok</id>
    <content type="html"><![CDATA[<p>The Builder Pattern is well known as an alternative to the constructors with multiple arguments; it increases code readability and the fluent interface allows object creation without passing null in the constructor etc. In a recent project, I was creating the domain objects and wanted to generate the builders for these objects cleanly and automatically; the less code the better. There are several Eclipse plugins that can generate the boilerplate code but there is a very clean way to remove the need for these plugins.</p>

<!-- more -->


<p><a href="https://github.com/peichhorn/lombok-pg">lombok-pg</a> provides an alternative. This library extends <a href="http://projectlombok.org/">Project Lombok</a> with even more funky stuff and one of those things is <code>@Builder</code>. The usage is best illustrated with a simple example.</p>

<pre><code class="java">package co.uk.agiletech.ecommerce.domain;

import java.util.List;

import lombok.Builder;
import lombok.Data;

@Data
@Builder
public class Customer {

    private String title;
    private String firstName;
    private String lastName;
    private List&lt;Order&gt; orders;

    public boolean hasOrders() {
        return orders != null &amp;&amp; orders.isEmpty();
    }
}
</code></pre>

<p>The builder can then be used in the test cases with ease.</p>

<pre><code class="java">package co.uk.agiletech.ecommerce.domain;

import static co.uk.agiletech.ecommerce.domain.Customer.customer;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import org.junit.Test;

public class CustomerTest {

    private Customer customer;

    @Test
    public void returnsFalseWhenCustomerHasNoOrders() {
        customer = customer().title("Mr")
                             .firstName("John")
                             .lastName("Smith")
                             .build();
        assertThat(customer.hasOrders(), is(false));
    }
}
</code></pre>
]]></content>
  </entry>
  
</feed>
