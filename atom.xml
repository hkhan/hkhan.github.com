<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Continous Improvement]]></title>
  <link href="http://hkhan.github.com/atom.xml" rel="self"/>
  <link href="http://hkhan.github.com/"/>
  <updated>2014-01-14T14:11:30+00:00</updated>
  <id>http://hkhan.github.com/</id>
  <author>
    <name><![CDATA[Haroon Khan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Review: Little Schemer, Fourth Edition]]></title>
    <link href="http://hkhan.github.com/blog/2014/01/14/review-little-schemer/"/>
    <updated>2014-01-14T11:34:48+00:00</updated>
    <id>http://hkhan.github.com/blog/2014/01/14/review-little-schemer</id>
    <content type="html"><![CDATA[<p><a href="http://mitpress.mit.edu/books/little-schemer">The Little Schemer</a> is very different from the usual books on programming. It can probably be considered the first &lsquo;koan-style&rsquo; book &ndash; it presents a dialogue between a student and a teacher which is used to further the student&rsquo;s progress and understanding.</p>

<p>The book starts off with the very basics and gradually builds more and more complex ideas namely <a href="http://en.wikipedia.org/wiki/Recursion_(computer_science)">recursion</a>, <a href="http://en.wikipedia.org/wiki/Fixed-point_combinator#Y_combinator">Y combinator</a> and the <a href="http://en.wikipedia.org/wiki/Meta-circular_evaluator">metacirular evaluator</a>. The code translates seamlessly to Racket which is a modern descendent of Scheme and working in DrRacket is a very enjoyable experience. I adopted a TDD approach using RackUnit as the testing framework to give a red-green-refactor style workflow. Gradually, the idea of recursion begins to sink in, the fog begins to clear and the choice of Lisp for expressing these ideas becomes clear. Its a very liberating feeling to be able to express solutions using the very minimal set of constructs whilst taking a peek at what&rsquo;s so special about Lisp.</p>

<p>In short, this is a wonderful book which has something for everyone. For those new to Lisp and previously used to imperative style, its an eye-opener. It exposes the reader to elegant and beautiful ideas of computation through its learn-by-doing and learn-by-reflection approach. For curious minds, these are fascinating avenues for further exploration. I&rsquo;ve thoroughly enjoyed going through the exercises, grasping the ideas presented and learning some Lisp along the way. Its definitely on my recommendation list.</p>

<p>Arguably, you can get all this with SICP which gives a much more rigorous and formal treatment of these topics (and more) but this is so much more fun and that&rsquo;s what its about, isn&rsquo;t it?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git: A Simple Workflow]]></title>
    <link href="http://hkhan.github.com/blog/2011/11/26/git-a-simple-workflow/"/>
    <updated>2011-11-26T23:41:00+00:00</updated>
    <id>http://hkhan.github.com/blog/2011/11/26/git-a-simple-workflow</id>
    <content type="html"><![CDATA[<p>This is a very simple yet effective workflow in small teams to encourage knowledge sharing and improve code quality. I have been using this lately and seems to be working very well. The following illustrates the workflow assuming the upstream remote named &lsquo;origin&rsquo; on github.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># create and switch to a new feature branch</span>
</span><span class='line'>git checkout -b new-feature
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># do some work on the feature branch and commit locally</span>
</span><span class='line'>git commit -m <span class="s1">&#39;Initial commit&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># push the &#39;feature&#39; branch to remote &#39;origin&#39;</span>
</span><span class='line'>git push -u origin new-feature and <span class="nb">set </span>up tracking
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git commit -m <span class="s1">&#39;Some more feature work&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># push some more commited work to remote</span>
</span><span class='line'>git push new-feature
</span></code></pre></td></tr></table></div></figure>


<p>Once the feature has been completed, raise a <strong>pull request</strong> which will result in a notification to the team members to review and merge the feature code into the master branch.</p>

<p>After successful code review and merging, get <strong>Hubot</strong> to deploy the master branch, test the feature and have a cup of tea!</p>
]]></content>
  </entry>
  
</feed>
